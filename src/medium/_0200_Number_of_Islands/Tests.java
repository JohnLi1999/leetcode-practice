package medium._0200_Number_of_Islands;

import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class Tests {

    @Nested
    class DFS {
        Solution_DFS solution_dfs = new Solution_DFS();

        @Test
        void test1() {
            char[][] grid = {   {'1', '1', '1', '1', '0'},
                                {'1', '1', '0', '1', '0'},
                                {'1', '1', '0', '0', '0'},
                                {'0', '0', '0', '0', '0'}   };
            assertEquals(1, solution_dfs.numIslands(grid));
        }

        @Test
        void test2() {
            char[][] grid = {   {'1', '1', '0', '0', '0'},
                                {'1', '1', '0', '0', '0'},
                                {'0', '0', '1', '0', '0'},
                                {'0', '0', '0', '1', '1'}   };
            assertEquals(3, solution_dfs.numIslands(grid));
        }

        @Test
        void test3() {
            char[][] grid = {   {'1', '1', '0', '0', '1'},
                                {'1', '0', '1', '0', '0'},
                                {'0', '1', '1', '0', '1'},
                                {'1', '1', '0', '1', '1'}   };
            assertEquals(4, solution_dfs.numIslands(grid));
        }

        @Test
        void test4() {
            char[][] grid = {   {'1', '1', '0', '0', '1'},
                                {'1', '1', '1', '0', '0'},
                                {'0', '1', '1', '0', '1'},
                                {'1', '1', '0', '1', '1'}   };
            assertEquals(3, solution_dfs.numIslands(grid));
        }

        @Test
        void test5() {
            char[][] grid = {};
            assertEquals(0, solution_dfs.numIslands(grid));
        }

        @Test
        void test6() {
            char[][] grid = {   {'1','0','1','1','1'},
                                {'1','0','1','0','1'},
                                {'1','1','1','0','1'}   };
            assertEquals(1, solution_dfs.numIslands(grid));
        }

        @Test
        void test7() {
            char[][] grid = {   {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
                                {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
                                {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
                                {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
                                {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}   };
            assertEquals(1, solution_dfs.numIslands(grid));
        }
    }

    @Nested
    class BFS {
        Solution_BFS solution_bfs = new Solution_BFS();

        @Test
        void test1() {
            char[][] grid = {   {'1', '1', '1', '1', '0'},
                                {'1', '1', '0', '1', '0'},
                                {'1', '1', '0', '0', '0'},
                                {'0', '0', '0', '0', '0'}   };
            assertEquals(1, solution_bfs.numIslands(grid));
        }

        @Test
        void test2() {
            char[][] grid = {   {'1', '1', '0', '0', '0'},
                                {'1', '1', '0', '0', '0'},
                                {'0', '0', '1', '0', '0'},
                                {'0', '0', '0', '1', '1'}   };
            assertEquals(3, solution_bfs.numIslands(grid));
        }

        @Test
        void test3() {
            char[][] grid = {   {'1', '1', '0', '0', '1'},
                                {'1', '0', '1', '0', '0'},
                                {'0', '1', '1', '0', '1'},
                                {'1', '1', '0', '1', '1'}   };
            assertEquals(4, solution_bfs.numIslands(grid));
        }

        @Test
        void test4() {
            char[][] grid = {   {'1', '1', '0', '0', '1'},
                                {'1', '1', '1', '0', '0'},
                                {'0', '1', '1', '0', '1'},
                                {'1', '1', '0', '1', '1'}   };
            assertEquals(3, solution_bfs.numIslands(grid));
        }

        @Test
        void test5() {
            char[][] grid = {};
            assertEquals(0, solution_bfs.numIslands(grid));
        }

        @Test
        void test6() {
            char[][] grid = {   {'1','0','1','1','1'},
                                {'1','0','1','0','1'},
                                {'1','1','1','0','1'}   };
            assertEquals(1, solution_bfs.numIslands(grid));
        }

        @Test
        void test7() {
            char[][] grid = {   {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
                                {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
                                {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
                                {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
                                {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
                                {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}   };
            assertEquals(1, solution_bfs.numIslands(grid));
        }
    }

    @Nested
    class Disjoint_Set {
        Solution_Disjoint_Set solution_disjoint_set = new Solution_Disjoint_Set();

        @Test
        void test1() {
            char[][] grid = {   {'1', '1', '1', '1', '0'},
                                {'1', '1', '0', '1', '0'},
                                {'1', '1', '0', '0', '0'},
                                {'0', '0', '0', '0', '0'}   };
            assertEquals(1, solution_disjoint_set.numIslands(grid));
        }

        @Test
        void test2() {
            char[][] grid = {   {'1', '1', '0', '0', '0'},
                                {'1', '1', '0', '0', '0'},
                                {'0', '0', '1', '0', '0'},
                                {'0', '0', '0', '1', '1'}   };
            assertEquals(3, solution_disjoint_set.numIslands(grid));
        }

        @Test
        void test3() {
            char[][] grid = {   {'1', '1', '0', '0', '1'},
                                {'1', '0', '1', '0', '0'},
                                {'0', '1', '1', '0', '1'},
                                {'1', '1', '0', '1', '1'}   };
            assertEquals(4, solution_disjoint_set.numIslands(grid));
        }

        @Test
        void test4() {
            char[][] grid = {   {'1', '1', '0', '0', '1'},
                                {'1', '1', '1', '0', '0'},
                                {'0', '1', '1', '0', '1'},
                                {'1', '1', '0', '1', '1'}   };
            assertEquals(3, solution_disjoint_set.numIslands(grid));
        }

        @Test
        void test5() {
            char[][] grid = {};
            assertEquals(0, solution_disjoint_set.numIslands(grid));
        }
    }
}